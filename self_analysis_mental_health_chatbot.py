# -*- coding: utf-8 -*-
"""Self-Analysis Mental Health Chatbot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nm8maFqKdbuBgCtQzXvk2imFqd3gsCxr
"""

!pip install gradio

from google.colab import drive
drive.mount('/content/drive')

import gradio as gr
import pandas as pd
import numpy as np
import joblib
import shap
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier

tech_survey_path = "/content/drive/MyDrive/survey.csv"
depression_anxiety_path = "/content/drive/MyDrive/scores.csv"
who_database_path = "/content/drive/MyDrive/mental.csv"

def prepare_datasets():
    np.random.seed(42)
    tech_survey = pd.DataFrame({
        'Symptom': ['fatigue', 'restlessness', 'lack of sleep', 'anxiety', 'depression']
    })

    depression_anxiety = pd.DataFrame({
        'Symptom': np.random.choice(['fatigue', 'restlessness', 'lack of sleep', 'anxiety', 'depression'], 100),
        'Condition': np.random.choice(['Anxiety', 'Depression', 'Stress'], 100)
    })

    who_data = pd.DataFrame({
        'Symptom': ['fatigue', 'restlessness', 'lack of sleep', 'anxiety', 'depression']
    })

    return tech_survey, depression_anxiety, who_data

try:
    tech_survey = pd.read_csv(tech_survey_path)
    depression_anxiety = pd.read_csv(depression_anxiety_path)
    who_data = pd.read_csv(who_database_path)
except Exception:
    print("Using alternative datasets")
    tech_survey, depression_anxiety, who_data = prepare_datasets()

symptoms_list = sorted(list(set(
    tech_survey['Symptom'].tolist() +
    depression_anxiety['Symptom'].tolist() +
    who_data['Symptom'].tolist()
)))

def prepare_model_data(symptoms_list):
    X, y = [], []
    for condition in ['Anxiety', 'Depression', 'Stress']:
        for _ in range(50):
            sample_symptoms = np.random.choice(symptoms_list, np.random.randint(1, 4), replace=False)
            features = [1 if symptom in sample_symptoms else 0 for symptom in symptoms_list]
            X.append(features)
            y.append(condition)
    return np.array(X), np.array(y)

X, y = prepare_model_data(symptoms_list)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X, y)

joblib.dump(model, "mental_health_model.pkl")

def predict_mental_health(user_input):
    try:

        if not user_input or len(user_input) > 500:
            return "Invalid input. Please provide a valid symptom description.", "", ""


        suspicious_patterns = ['script', '<', '>', 'javascript', 'alert']
        if any(pattern in user_input.lower() for pattern in suspicious_patterns):
            return "Error: Suspicious input detected.", "", ""


        normalized_input = ' '.join(user_input.lower().split())


        input_features = [1 if symptom.lower() in normalized_input else 0 for symptom in symptoms_list]


        if sum(input_features) == 0:
            return "No recognizable symptoms found. Please describe your symptoms more clearly.", "", ""

        prediction = model.predict([input_features])[0]

        coping_mechanisms = {
            "Anxiety": "Try mindfulness exercises and deep breathing techniques.",
            "Depression": "Consider journaling your thoughts and seeking therapy.",
            "Stress": "Take breaks, practice relaxation, and seek support from loved ones.",
        }
        suggestion = coping_mechanisms.get(prediction, "No specific suggestions available.")

        return prediction, f"Prediction based on symptoms.", suggestion

    except Exception as e:

        return f"Prediction error: {str(e)}", "", ""

with gr.Blocks() as interface:
    with gr.Row():
        gr.Markdown(
            """
            ## üß† Self-Analysis Mental Health Chatbot
            Welcome! Enter your symptoms, and this tool will predict possible mental health conditions, provide explanations, and suggest coping mechanisms. üíú
            """
        )
    with gr.Row():
        user_input = gr.Textbox(
            label="üí¨ Describe your symptoms (comma-separated)",
            placeholder="E.g., fatigue, restlessness, lack of sleep",
            lines=2,
        )
    with gr.Row():
        analyze_button = gr.Button("üîç Analyze")

    condition_output = gr.Textbox(label="Predicted Mental Health Condition")
    explanation_output = gr.Textbox(label="Explanation of Prediction")
    suggestion_output = gr.Textbox(label="Suggested Coping Mechanism")

    analyze_button.click(
        fn=predict_mental_health,
        inputs=[user_input],
        outputs=[condition_output, explanation_output, suggestion_output],
    )

    with gr.Row():
        gr.Markdown(
            """
            ---
            ### ‚ö†Ô∏è Important Note:
            This chatbot provides general mental health advice and insights. For personalized medical advice, please consult a licensed mental health professional.
            """
        )

interface.launch(share=True)

